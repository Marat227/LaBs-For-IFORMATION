// 1

#include <iostream>
using namespace std;
char el;

struct Stack
{
	char data;
	Stack* prev;
};

Stack* Create(int n)
{
	if (n == 0)
	{
		return NULL;
	}
	Stack* top, * p;
	top = NULL;
	p = new Stack;

	cout << "Введите элементы: ";
	cin >> el;
	p->data = el;
	p->prev = NULL;
	top = p;

	for (int i = 2; i <= n; i++)
	{
		Stack* h = new Stack;

		cin >> el;
		h->data = el;
		h->prev = top;
		top = h;
	}
	return top;
}

void Print(Stack* top)
{
	if (top == NULL)
	{
		cout << "Стек пуст" << endl;
	}

	else
	{
		Stack* p = top;

		while (p != NULL)
		{
			cout << p->data << " ";
			p = p->prev;
		}
		cout << endl;
	}
}

void Add(Stack*& first, int n)
{
	Stack* p = first;
	Stack* h = new Stack;

	cout << "Введите элементы для добавления: ";
	cin >> h->data;
	h->prev = p;
	first = h;

	while (p->prev != NULL)
	{
		Stack* h = new Stack;

		cin >> h->data;
		h->prev = p->prev;
		p->prev = h;

		if (p->prev->prev != NULL)
		{
			p = p->prev->prev;
		}
		else
		{
			p = p->prev;
		}
	}
}

int main()
{
	setlocale(LC_ALL, "Rus");
	cout << "Введите количество элементов: ";
	int count;
	cin >> count;
	Stack* st = Create(count);
	cout << "Стек: ";
	Print(st);
	Add(st, count);

	cout << "Изменённый стек: ";
	Print(st);
	return 0;
} 


// 2 

#include <iostream>
#include <string>
#include <list>
using namespace std;

struct DoubleList
{
	int data;
	DoubleList* next;
	DoubleList* prev;
};
DoubleList* head;

void Add(int value, int position)
{

	DoubleList* node = new DoubleList;
	node->data = value;

	if (head == NULL)
	{
		node->next = node;
		node->prev = node;
		head = node;
	}

	else
	{
		DoubleList* p = head;

		for (int i = position; i > 0; i--)

			p = p->next;
		p->prev->next = node;
		node->prev = p->prev;
		node->next = p;
		p->prev = node;
	}
}

int Delete(int position)
{
	if (head == NULL)
	{
		cout << "\nСписок пуст\n\n";
		return 0;
	}

	if (head == head->next)
	{
		delete head;
		head = NULL;
	}

	else
	{
		DoubleList* a = head;

		for (int i = position; i > 1; i--)
		{
			a = a->next;
		}

		if (a == head)
		{
			head = a->next;
		}
		a->prev->next = a->next;
		a->next->prev = a->prev;
		delete a;
	}
}

void Print()
{
	DoubleList* a = head;

	do
	{
		cout << a->data << " ";
		a = a->next;
	} while (a != head);
	cout << "\n\n";
}

void double_list()
{
	int numbersCount = -1;
	int k, j = -1;

	while (numbersCount <= 0)
	{
		cout << "Введите количество элементов списка: ";
		cin >> numbersCount;
	}

	cout << "Введите элементы списка:" << endl;
	for (int i = 0; i < numbersCount; i++)
	{
		cin >> k;

		Add(k, i);

		if (k % 2 == 0)
		{
			j = i + 1;
		}
	}

	if (j == -1)
	{
		cout << "Четных элементов нет";
	}
	else
	{
		Delete(j);
		cout << "Измененный список: ";
		Print();
	}
}

int main()
{
	setlocale(LC_ALL, "ru");

	double_list();

	return 0;
} 

// 3 

#include <iostream>
#include <string>
using namespace std;

struct List
{
	char data;
	List* next;
};

List* add(int size)
{

	if (size == NULL)
	{
		cout << "Error!:" << endl;
		return 0;
	}
	List* first, * p;

	first = NULL;
	p = new List;

	cout << "Введите элементы списка: " << endl;
	cin >> p->data;
	first = p;

	for (int i = 2; i <= size; i++)
	{
		List* h = new List;
		p->next = h;
		p = p->next;
		cin >> p->data;
		p->next = NULL;
	}
	return first;
}

void print(List* first)
{
	if (first == NULL)
	{
		cout << "Новый список: " << endl;
	}
	else
	{
		List* p = first;
		while (p != NULL)
		{
			cout << p->data << " ";
			p = p->next;
		}
		cout << endl;
	}
}

void add(List*& first, int n)
{
	List* p = first;
	List* h = new List;

	cout << "Введите " << n << " элемента(ов): ";
	cin >> h->data;

	h->next = p;
	first = h;

	while (p->next != NULL)
	{
		List* h = new List;
		cin >> h->data;
		h->next = p->next;
		p->next = h;
		if (p->next->next != NULL)
		{
			p = p->next->next;
		}
		else p = p->next;
	}
}

int main()
{
	setlocale(LC_ALL, "Rus");

	int size;
	cout << "Введите размер списка: ";
	cin >> size;

	List* list = add(size);

	cout << "Список: ";
	print(list);

	add(list, size);

	cout << "Изменённый список: ";
	print(list);

	return 0;
}


// 4 

#include <iostream>
using namespace std;

struct Queue {
	int data;
	Queue* next;
};

Queue* Create(int n, Queue*& first, Queue*& last)
{
	if (n == 0)
		return NULL;
	Queue* p = new Queue;

	int a;
	cout << "Введите элементы очереди: ";
	cin >> a;

	p->data = a;
	p->next = NULL;
	first = p;
	last = p;

	for (int i = 2; i <= n; i++)
	{
		Queue* h = new Queue;

		cin >> a;
		h->data = a;
		h->next = p;
		last = h;
		p = last;
	}
	return first;
}

Queue* Push(int n, Queue*& last)
{
	Queue* p = new Queue;
	p->data = n;
	p->next = last;
	last = p;

	return last;
}

void Print(Queue* last)
{
	Queue* p = last;


	while (p != NULL)
	{
		cout << p->data << " ";
		p = p->next;
	}

	cout << endl;
}

int Pop(Queue*& first, Queue*& last)
{
	Queue* p = last;

	int k = 0;

	while (p != NULL)
	{
		k++;
		p = p->next;
	}
	p = last;

	if (k == 1)
	{
		int t = last->data;
		delete p;
		last = NULL;
		first = NULL;

		return t;
	}

	else {
		while (p->next->next != NULL)
		{
			p = p->next;
		}
		Queue* t = p;

		int e = p->next->data;
		p = p->next;
		t->next = NULL;
		first = t;

		delete p;

		return e;
	}
}

int main()
{
	setlocale(LC_ALL, "Rus");

	cout << "Введите количество элементов в очереди: ";
	int n;
	int k;
	cin >> n;

	Queue* first, * last;

	Create(n, first, last);

	cout << "Очередь: ";
	Print(last);

	int* arr = new int[n];

	for (int i = 0; i < n; i++)
	{
		int t = Pop(first, last);
		arr[i] = t;

		if (t % 2 == 0)
		{
			k = t;
		}
	}

	for (int i = 0; i < n; i++)
	{
		if (arr[i] != k)
		{
			Push(arr[i], last);
		}
	}

	cout << "Очередь после удаления: ";
	Print(last);

	return 0;
} 
