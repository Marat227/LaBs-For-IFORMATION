#include <iostream>
#include <string>
#include <Windows.h>
using namespace std;

//Функция для заполнения тыблицы смещений
void prepare_smesh(int* arr, int m, const int maxn, wstring pattern) {
    for (int i = 0; i < maxn; i++) { //Заполнение всей таблицы смещений длиной строки (для отсутствующих букв: *)
        arr[i] = m;
    }
    for (int i = 0; i < m; i++) {
        arr[pattern[i]] = m - i - 1; //Заполнение таблицы смещений для имеющихся буквы
    }
    arr[pattern[m - 1]] = m; //Заполнение таблицы смещения для послднего элемента 
}

//Алгоритм Бойера-Мура
int boyer_moore(int m, int n, wstring text, wstring pattern,int* arr) {
    int i = 0;
    while (i <= n - m) {    //Цикл идущий по разнице длин строки и подстроки
        int j = m - 1;  //Индекс последнего элемента подстроки
        while (j >= 0 && text[i + j] == pattern[j]) {   //Поиск совпадающих элементов (происходит с конца)
            j--;    //Уменишения индекса подстроки для проверки следующего элемента
        }
        if (j == -1) {
            return i; 
        }
        i += arr[text[i + j]];    //Перенос указателя по таблице смещений
    }
    return -1; //Совпадений не найдено
}

//Префикс-функция
void pref_f(const wstring& pattern, int* pi) {
    int l = pattern.length();
    pi[0] = 0;
    int j = 0;
    int i = 1;
    while (i < l) {
        if (pattern[i] != pattern[j]) {//Проверка на несовпадение
            if (j == 0) {
                pi[i] = 0;
                i++;
            }
            else {
                if (j > 0)
                    j = pi[j - 1];
            }
        }
        else {
            if (pattern[j] == pattern[i]) {
                pi[i] = j + 1;
                i++;
                j++;
            }

        }
    }
}

//Алгоритм КМП
void kmp(const wstring& text, const wstring& pattern) {
    setlocale(LC_ALL, "RUS");
    int n = text.length();
    int m = pattern.length();
    int* pi = new int[m];
    pref_f(pattern, pi);
    int i = 0;
    int j = 0;
    while (i < n) {
        if (text[i] == pattern[j]) {
            i++;
            j++;
            if (j == m) {
                cout << "Номер первого вхождения первого символа подстроки: " << i - m + 1 << endl;
            }
        }
        else {
            if (j > 0) {
                j = pi[j - 1];
            }
            else {
                i++;
                if (i == n) 
                    cout << "Подстрока не найдена" << endl;
            }
        }
    }

    delete[]pi;
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    const int maxn = 10000;
    int* smesh = new int[maxn];
    int n, m;
    wstring str; 
    wstring obraz; 
    cout << "ПОИСК БОЙЕРА-МУРА" << endl;
    cout << "Введите строку: "; getline(wcin, str);
    cout << "Введите образ для поиска: "; getline(wcin, obraz);
    n = str.length();
    m = obraz.length();
    prepare_smesh(smesh, m, maxn, obraz);
    int pos = boyer_moore(m, n, str, obraz, smesh);
    if (pos == -1) {
        cout << "Подстрока не найдена" << endl;
    }
    else {
        cout << "Номер первого вхрждения первого символа подстроки: " << pos + 1 << endl;
    }
    delete[] smesh;
    cout << endl << endl;
    str.clear();
    obraz.clear();
    cout << "ПОИСК КНУТА-МОРРИСА-ПРАТТА" << endl;
    cout << "Введите строку: "; getline(wcin, str);
    cout << "Введите образ для поиска: "; getline(wcin, obraz);
    kmp(str, obraz);
    return 0;
}