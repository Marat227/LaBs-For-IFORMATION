Задача 1.
1. Создать последовательный контейнер.
2. Заполнить его элементами пользовательского типа (тип указан в варианте). Для пользовательского типа перегрузить необходимые операции.
3. Заменить элементы в соответствии с заданием (использовать алгоритмы
replace_if(), replace_copy(), replace_copy_if(), fill()).
4. Удалить элементы в соответствии с заданием (использовать алгоритмы
remove(),remove_if(), remove_copy_if(),remove_copy())
5. Отсортировать контейнер по убыванию и по возрастанию ключевого поля (использовать алгоритм sort()).
6. Найти в контейнере заданный элемент (использовать алгоритмы find(), find_if(), count(), count_if()).
7. Выполнить задание варианта для полученного контейнера (использовать алгоритм
for_each()) .
8. Для выполнения всех заданий использовать стандартные алгоритмы библиотеки STL.
Задача 2.
1. Создать адаптер контейнера.
2. Заполнить его элементами пользовательского типа (тип указан в варианте). Для пользовательского типа перегрузить необходимые операции.
3. Заменить элементы в соответствии с заданием (использовать алгоритмы
replace_if(), replace_copy(), replace_copy_if(), fill()).
4. Удалить элементы в соответствии с заданием (использовать алгоритмы
remove(),remove_if(), remove_copy_if(),remove_copy())
5. Отсортировать контейнер по убыванию и по возрастанию ключевого поля (использовать алгоритм sort()).
6. Найти в контейнере элемент с заданным ключевым полем (использовать
алгоритмы find(), find_if(), count(), count_if()).
7. Выполнить задание варианта для полученного контейнера (использовать алгоритм
for_each()) .
9. Для выполнения всех заданий использовать стандартные алгоритмы библиотеки STL.
Задача 3
1. Создать ассоциативный контейнер.
2. Заполнить его элементами пользовательского типа (тип указан в варианте). Для пользовательского типа перегрузить необходимые операции.
3. Заменить элементы в соответствии с заданием (использовать алгоритмы
replace_if(), replace_copy(), replace_copy_if(), fill()).
4. Удалить элементы в соответствии с заданием (использовать алгоритмы
remove(),remove_if(), remove_copy_if(),remove_copy())
5. Отсортировать контейнер по убыванию и по возрастанию ключевого поля (использовать алгоритм sort()).
6. Найти в контейнере элемент с заданным ключевым полем (использовать
алгоритмы find(), find_if(), count(), count_if()).
7. Выполнить задание варианта для полученного контейнера (использовать алгоритм
for_each()) .
8. Для выполнения всех заданий использовать стандартные алгоритмы библиотеки STL.
